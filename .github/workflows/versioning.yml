name: Publish

on: push

env:
  CARGO_TERM_COLOR: always

jobs:
  Release:
    runs-on: ubuntu-latest

    env:
      branch: ${{ github.head_ref || github.ref_name }}

    outputs:
      semVer: ${{ steps.set_semver.outputs.semVer }}

    steps:

    - name: Checkout the code
      uses: actions/checkout@v2
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Git Fetch Unshallow
      run: git fetch --prune --tags --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
    
    - name: Output semver
      id: set_semver
      run: |
        if [[ ${{ env.branch }} == 'main' ]];
        then
          echo "::set-output name=semVer::$GitVersion_MajorMinorPatch"
        else
          echo "::set-output name=semVer::$GitVersion_SemVer"
        fi

    - name: Release
      run: |
        cargo build --release
    
    - name: Zip Content
      run: |
        zip -r myrepo-windows-${{ steps.set_semver.outputs.semVer }}.zip . -i target/release/myrepo.exe
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: myrepo-windows-${{ steps.set_semver.outputs.semVer }}
        path: myrepo-windows-${{ steps.set_semver.outputs.semVer }}.zip
        if-no-files-found: error
  
  Publish:
    runs-on: ubuntu-latest
    needs: Release
    env:
      branch: ${{ github.head_ref || github.ref_name }}
      version: ${{ needs.Release.outputs.semVer }}
      tag: v${{ needs.Release.outputs.semVer }}
      windows_package_name: 'myrepo-windows-${{ needs.Release.outputs.semVer }}'
      packageFileName: 'myrepo-windows-${{ needs.Release.outputs.semVer }}.exe'
      packageId: 'myrepo'
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Git Fetch Unshallow
      run: git fetch --prune --tags --unshallow
    
    - name: Download Windows Artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.windows_package_name }}
        path: ${{ runner.temp }}

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        prerelease:  ${{ env.branch != 'main' }}
        allowUpdates: true
        draft: false
        tag: ${{ env.tag }}
        name: myrepo-${{ env.version}}
        token: ${{ github.token }}

    - name: Upload release windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ runner.temp }}/${{ env.windows_package_name }}.zip
        asset_name: ${{ env.windows_package_name }}.zip
        asset_content_type: application/zip